!! Day 6: Memory Reallocation




!!! Largest block test

[[[
Advent06AllocatorTest >> testPickLargest
	| reallocator |
	reallocator := Advent06Allocator new bank: #(0 2 7 0).
	self assert: reallocator indexOfLargest equals: 3
]]]

[[[
Object subclass: #Advent06Allocator
	instanceVariableNames: 'bank amountToRedistribute'
	classVariableNames: ''
	package: 'Advent'
]]]

[[[
Advent06Allocator >> bank: aBank
	bank := aBank
]]]

Here is a possible definition for ==indexOfLargest==

[[[
Advent06Allocator >> indexOfLargest
		"returns the first largest element."
		^ bank indexOf: bank max
]]]

In a second iteration we should implement it only one pass.

!!! The allocation process

For example, imagine a scenario with only four memory banks:

The banks start with 0, 2, 7, and 0 blocks. The third bank has the most blocks, so it is chosen for redistribution.
Starting with the next bank (the fourth bank) and then continuing to the first bank, the second bank, and so on, the 7 blocks are spread out over the memory banks. The fourth, first, and second banks get two blocks each, and the third bank gets one back. The final result looks like this: 2 4 1 2.

Next, the second bank is chosen because it contains the most blocks (four). Because there are four memory banks, each gets one block. The result is: 3 1 2 3.
Now, there is a tie between the first and fourth memory banks, both of which have three blocks. The first bank wins the tie, and its three blocks are distributed evenly over the other three banks, leaving it with none: 0 2 3 4.
The fourth bank is chosen, and its four blocks are distributed such that each of the four banks receives one: 1 3 4 1.

The third bank is chosen, and the same thing happens: 2 4 1 2.
At this point, we've reached a state we've seen before: 2 4 1 2 was already seen. The infinite loop is detected after the fifth block redistribution cycle, and so the answer in this example is 5.


!!! Preparing the distribution

[[[
Advent06AllocatorTest >> testPrepareRedistribution
	| reallocator |
	reallocator := Advent06Allocator new.
	reallocator bank: #(0 2 7 0) copy.
	"we copy the array to make sure that we will work on a new version"
	reallocator prepareRedistributionOf: 3.
	self assert: reallocator bank equals: #(0 2 0 0).
	self assert: reallocator amountToRedistribute equals: 7
]]]


[[[
Advent06Allocator >> amountToRedistribute
	^ amountToRedistribute
]]]

[[[
Advent06Allocator >> bank
	^ bank
]]]

[[[
Advent06Allocator >> prepareRedistributionOf: anIndex
	amountToRedistribute := bank at: anIndex.
	bank at: anIndex put: 0
]]]

!!! About copying the bank

Since the method ==prepareRedistributionOf:== will modify the bank array, we have to be cautious
because this literal array is stored in the compiled method itself and it will be modified while we would like 
to have a different array for each iteration. There we make sure that we work on a copy of the array. 


We could change the definition of the ==bank:== as follows:

[[[
Advent06Allocator >> bank: aBank
	bank := aBank copy
]]]

However first we should change its name to reflect that it will work on a copy (for example, ==copyAndSetBank:==).
Second we should think about the invariant that 

In the test testPrepareRedistribution we copy the array to make sure that we will work on a new version.


!!! Redistributing one block

Let us write a test to cover the redistribution of the third block containing 7 elements. 

[[[
Advent06AllocatorTest >> testRedistributeBlocksAtIndex
	| reallocator |
	reallocator := Advent06Allocator new bank: #(0 2 7 0) copy.
	self assert: (reallocator redistributeIndex: 3) equals: #(2 4 1 2)
]]]

The implementation is the following: we prepare the bank and then we increment the value of the elements
paying attention that the bank wraps.
We return the bank to ease test writing and the following method.
[[[
Advent06Allocator >> redistributeIndex: anIndex
	| currentIndex |
	self prepareRedistributionOf: anIndex.
	currentIndex := anIndex + 1.
	amountToRedistribute
		timesRepeat: [ bank atWrap: currentIndex put: (bank atWrap: currentIndex) + 1.
			currentIndex := currentIndex + 1 ].
	^ bank
]]]


!!! Number of redistributions

Now we specify the last test to compute the number of iterations that should be done. 

[[[
Advent06AllocatorTest >> testRedistributeNoPattern
	| reallocator |
	reallocator := Advent06Allocator new bank: #(0 2 7 0) copy.
	self assert: reallocator redistributeNoPattern equals: 5
]]]


The iterations is the number of redistribution before finding the same configuration of the blocks.
We need a way to keep the bank configuration to identify that we loop. We could produce a hash number based on the bank distribution. 
For now we just copy the bank and check that we did not encounter a new one. 

[[[
Advent06Allocator >> redistributeNoPattern
	| redistributions redistribution |
	redistributions := OrderedCollection new.
	redistributions add: bank copy.
	[ redistribution := self redistributeIndex: self indexOfLargest.
	(redistributions includes: redistribution) not ]
		whileTrue: [ redistributions add: redistribution copy ].
	^ redistributions size
]]]




Given the initial block counts in your puzzle input, how many redistribution cycles must be completed before a configuration is produced that has been seen before?

[[[
Advent06AllocatorTest >> testPuzzle
	| reallocator |
	reallocator := Advent06Allocator new bank: #(0 5 10 0 11 14 13 4 11 8 8 7 1 4 12 11) copy.
	self assert: reallocator redistributeNoPattern equals: ???
]]]


