!! Day 1: Inverse Captcha


!!! First some classes
[[[
Object subclass: #Advent01
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Advent'
]]]

[[[
TestCase subclass: #Advent01Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Advent'
]]]

!!! First tests

[[[
Advent01Test >> testAllTheSame

	self assert: (Advent01 new captchaFor: 1111 equals: 4)
]]]


[[[
Object subclass: #Advent01
	instanceVariableNames: 'aString'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Advent'
]]]

[[[
Advent01 >> captchaFor: aNumber
	| matchedNumbers runString |

	aString := aNumber printString.
	runString := aString, aString first. "so that we handle the last matching the first."
	matchedNumbers := OrderedCollection new.
	1 to: aString size do: [ :i |
		(aString at: i) = (runString at: i+1)
		ifTrue: [ matchedNumbers add: (aString at: i) ] ].
	^ matchedNumbers sum
	
]]]

!!! More tests

[[[
Advent01Test >> testOneOneTwoTwo

	self assert: (Advent01 new captchaFor: 1122) equals: 3
]]]

[[[
Advent01 >> captchaFor: aNumber
	"a rather ugly implementation manipulating string instead of digits."
	
	| matchedNumbers runString |
	aString := aNumber printString.
	runString := aString, (aString first asString). "so that we handle the last matching the first."
	matchedNumbers := OrderedCollection new.
	1 to: aString size do: [ :i |
		(aString at: i) = (runString at: i+1)
		ifTrue: [ matchedNumbers add: (aString at: i) asString asNumber ] ].
	^ matchedNumbers sum
	
]]]

[[[
Advent01Test >> testNoMatch

	self assert: (Advent01 new captchaFor: 1234) equals: 0
]]]

[[[
Advent01 >> captchaFor: aNumber
	"a rather ugly implementation manipulating string instead of digits."
	
	| matchedNumbers runString |
	aString := aNumber printString.
	runString := aString, (aString first asString). "so that we handle the last matching the first."
	matchedNumbers := OrderedCollection new.
	1 to: aString size do: [ :i |
		(aString at: i) = (runString at: i+1)
		ifTrue: [ matchedNumbers add: (aString at: i) asString asNumber ] ].
	^ matchedNumbers inject: 0 into: [ :sum :each | sum + each  ]
]]]

[[[
Advent01Test >> testNine

	self assert: (Advent01 new captchaFor: 91212129) equals: 9
]]]

!!! Large one

[[[
Advent01Test >> testLargeOne

	self assert: (Advent01 new captchaForequals: 1343
]]]

!!! Problem two

[[[
Advent01Test >> testNewCaptcha
	"1212 produces 6: the list contains 4 items, and all four digits match the digit 2 items ahead."
	
	self assert: (Advent01 new newcaptchaFor:  1212) equals: 6
]]]

[[[
Advent01Test >> testNewCaptchaOneTwoTwoOneResultsInZero
	"1212 produces 6: the list contains 4 items, and all four digits match the digit 2 items ahead."
	
	self assert: (Advent01 new newcaptchaFor:  1221) equals: 0
]]]


[[[
Advent01 >> newcaptchaFor: aNumber
	"a rather ugly implementation manipulating string instead of digits."
	
	| matchedNumbers runString halfLength |
	aString := aNumber printString.
	runString := aString, aString.
	halfLength := aString size // 2. 
	matchedNumbers := OrderedCollection new.
	1 to: aString size do: [ :i |
		(aString at: i) = (runString at: i + halfLength)
			ifTrue: [ matchedNumbers add: (aString at: i) asString asNumber ] ].
	^ matchedNumbers inject: 0 into: [ :sum :each | sum + each  ]
]]]

[[[
Advent01Test >> testNewCaptcha123425
	"1212 produces 6: the list contains 4 items, and all four digits match the digit 2 items ahead."
	
	self assert: (Advent01 new newcaptchaFor:  123425) equals: 4
]]]

[[[
Advent01Test >> testNewCaptcha123123
	"1212 produces 6: the list contains 4 items, and all four digits match the digit 2 items ahead."
	
	self assert: (Advent01 new newcaptchaFor:  123123) equals: 12
]]]

[[[
Advent01Test >> testNewCaptcha12131415
	"1212 produces 6: the list contains 4 items, and all four digits match the digit 2 items ahead."
	
	self assert: (Advent01 new newcaptchaFor:  12131415) equals: 4
]]]

[[[
Advent01Test >> testNewCaptchaLarge
	"1212 produces 6: the list contains 4 items, and all four digits match the digit 2 items ahead."
	
	self assert: (Advent01 new newcaptchaForequals: 1274
]]]
